sheet GraphType
{
constant:
		ColumnGraphType: 1;
		StackedColumnGraphType: 2;
		BarGraphType: 3;
		StackedBarGraphType: 4;
		LineGraphType: 5;
		AreaGraphType: 6;
		ScatterGraphType: 7;
		PieGraphType: 8;
		RadarGraphType: 9;
		
		UseLeftAxis: 1;
		UseRightAxis: 2;
		UseTopAxis: 3;
		UseBottomAxis: 4;
interface:
		GraphType: 1;
		GraphType_Column: 1;
		GraphType_StackedColumn: 2;
		GraphType_Bar: 3;
		GraphType_StackedBar: 4;
		GraphType_Line: 5;
		GraphType_Area: 6;
		GraphType_Scatter: 7;
		GraphType_Pie: 8;
		GraphType_Radar: 9;

		ColumnWidth: 90;
		ClusterWidth: 80;
		BarWidth: 90;
		MarkDataPoints: true;
		EdgeToEdgeLines: false;
		ConnectDataPoints: true;
		DrawFilledLines: false;
		LineWidthValue: 3;
		unlink LineWidth: LineWidthValue <== !DrawFilledLines ? LineWidthValue : LineWidth;
		
		StyleAddDropShadow: false;
		StyleAddLegendAcrossTop: false;
		StyleFirstRowInFront: false;
		StyleFirstColumnInFront: true;
				
		IsBarGraphType: false <== (GraphType == 3 || GraphType == 4) ? true : false;
		IsColumnGraphType: false <== (GraphType == 1 || GraphType == 2) ? true : false;
		IsColumnBarGraphType: false <== (IsBarGraphType || IsColumnGraphType) ? true : false;
		IsScatterGraphType: false <== (GraphType == 7) ? true : false;
		IsLineScatterRadarGraphType: false <== (GraphType == 5 || GraphType == 9 || IsScatterGraphType) ? true : false;
		IsPieGraphType: false <== (GraphType == 8) ? true : false;
		IsRadarGraphType: false <== (GraphType == 9) ? true : false;
		IsLineGraphType: false <== (GraphType == 5) ? true : false;
		IsAreaGraphType: false <== (GraphType == 6) ? true : false;
										
		PieLegends: 2;
		PieLegendsMenu: [	{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/legends1=No Legend", value: 1 },
							{ name:	"$$$/Illustrator/Graphs/Dialog/GraphType/legends2=Standard Legend", value: 2 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/legends3=Legends in Wedges", value: 3 }];
		PiePosition: 1;
		PiePositionMenu: [	{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/position1=Ratio", value: 1 },
							{ name:	"$$$/Illustrator/Graphs/Dialog/GraphType/position2=Even", value: 2 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/position3=Stacked", value: 3 }];
		PieSort: 3;
		PieSortMenu: [	{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/sort1=All", value: 1 },
						{ name:	"$$$/Illustrator/Graphs/Dialog/GraphType/sort2=First", value: 2 },
						{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/sort3=None", value: 3 }];							
		
		TickMarksMenu: [ { name: "$$$/Illustrator/Graphs/Dialog/GraphType/tickMarks1=None", value: 1 },
						{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/tickMarks2=Short", value: 2 },
						{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/tickMarks3=Full Width", value: 3 }];

		LeftAxis_LabelPrefix: "";
		LeftAxis_LabelSuffix: "";
		LeftAxis_TickMarksLength: 2;
		LeftAxis_TickMarksDivision: 0;
		LeftAxis_TickMarksBetweenLabels: true;
		LeftAxis_TickVal: 0.2;
		LeftAxis_OverrideCalculatedValues: false;
		LeftAxis_MinValue: 0;
		LeftAxis_MaxValue: 1;
		LeftAxis_DivisionsValue: (LeftAxis_MaxValue - LeftAxis_MinValue) / LeftAxis_TickVal;
		unlink LeftAxis_OverrideMinValue: LeftAxis_MinValue <== !LeftAxis_OverrideCalculatedValues ? LeftAxis_MinValue : LeftAxis_OverrideMinValue;
		unlink LeftAxis_OverrideMaxValue: LeftAxis_MaxValue <== !LeftAxis_OverrideCalculatedValues ? LeftAxis_MaxValue : LeftAxis_OverrideMaxValue ;
		unlink LeftAxis_OverrideDivisionsValue: LeftAxis_DivisionsValue <== !LeftAxis_OverrideCalculatedValues ? LeftAxis_DivisionsValue : LeftAxis_OverrideDivisionsValue;
		
		RightAxis_LabelPrefix: "";
		RightAxis_LabelSuffix: "";
		RightAxis_TickMarksLength: 2;
		RightAxis_TickMarksDivision: 0;
		RightAxis_TickMarksBetweenLabels: true;
		RightAxis_TickVal: 0.2;
		RightAxis_OverrideCalculatedValues: false;
		RightAxis_MinValue: 0;
		RightAxis_MaxValue: 1;
		RightAxis_DivisionsValue: (RightAxis_MaxValue - RightAxis_MinValue) / RightAxis_TickVal;
		unlink RightAxis_OverrideMinValue: RightAxis_MinValue <== !RightAxis_OverrideCalculatedValues ? RightAxis_MinValue : RightAxis_OverrideMinValue;
		unlink RightAxis_OverrideMaxValue: RightAxis_MaxValue <== !RightAxis_OverrideCalculatedValues ? RightAxis_MaxValue : RightAxis_OverrideMaxValue ;
		unlink RightAxis_OverrideDivisionsValue: RightAxis_DivisionsValue <== !RightAxis_OverrideCalculatedValues ? RightAxis_DivisionsValue : RightAxis_OverrideDivisionsValue;
		
		TopAxis_LabelPrefix: "";
		TopAxis_LabelSuffix: "";
		TopAxis_TickMarksLength: 2;
		TopAxis_TickMarksDivision: 0;
		TopAxis_TickMarksBetweenLabels: true;
		TopAxis_TickVal: 0.2;
		TopAxis_OverrideCalculatedValues: false;
		TopAxis_MinValue: 0;
		TopAxis_MaxValue: 1;
		TopAxis_DivisionsValue: (TopAxis_MaxValue - TopAxis_MinValue) / TopAxis_TickVal;
		unlink TopAxis_OverrideMinValue: TopAxis_MinValue <== !TopAxis_OverrideCalculatedValues ? TopAxis_MinValue : TopAxis_OverrideMinValue;
		unlink TopAxis_OverrideMaxValue: TopAxis_MaxValue <== !TopAxis_OverrideCalculatedValues ? TopAxis_MaxValue : TopAxis_OverrideMaxValue ;
		unlink TopAxis_OverrideDivisionsValue: TopAxis_DivisionsValue <== !TopAxis_OverrideCalculatedValues ? TopAxis_DivisionsValue : TopAxis_OverrideDivisionsValue;
		
		BottomAxis_LabelPrefix: "";
		BottomAxis_LabelSuffix: "";
		BottomAxis_TickMarksLength: 2;
		BottomAxis_TickMarksDivision: 0;
		BottomAxis_TickMarksBetweenLabels: true;
		BottomAxis_TickVal: 0.2;
		BottomAxis_OverrideCalculatedValues: false;
		BottomAxis_MinValue: 0;
		BottomAxis_MaxValue: 1;
		BottomAxis_DivisionsValue: (BottomAxis_MaxValue - BottomAxis_MinValue) / BottomAxis_TickVal;
		unlink BottomAxis_OverrideMinValue: BottomAxis_MinValue <== !BottomAxis_OverrideCalculatedValues ? BottomAxis_MinValue : BottomAxis_OverrideMinValue;
		unlink BottomAxis_OverrideMaxValue: BottomAxis_MaxValue <== !BottomAxis_OverrideCalculatedValues ? BottomAxis_MaxValue : BottomAxis_OverrideMaxValue ;
		unlink BottomAxis_OverrideDivisionsValue: BottomAxis_DivisionsValue <== !BottomAxis_OverrideCalculatedValues ? BottomAxis_DivisionsValue : BottomAxis_OverrideDivisionsValue;
		
		ValueAxisMenuType1: [ { name: "$$$/Illustrator/Graphs/Dialog/GraphType/valueAxis1=On Left Side", value: 1 },
							  { name: "$$$/Illustrator/Graphs/Dialog/GraphType/valueAxis2=On Right Side", value: 2 },
							  { name: "$$$/Illustrator/Graphs/Dialog/GraphType/valueAxis3=On Both Sides", value: 3 }];
		ValueAxisMenuType2: [ { name: "$$$/Illustrator/Graphs/Dialog/GraphType/valueAxis4=On Top Side", value: 1 },
							  { name: "$$$/Illustrator/Graphs/Dialog/GraphType/valueAxis5=On Bottom Side", value: 2 },
							  { name: "$$$/Illustrator/Graphs/Dialog/GraphType/valueAxis3=On Both Sides", value: 3 }];
		ValueAxisMenuType3: [ { name: "$$$/Illustrator/Graphs/Dialog/GraphType/valueAxis1=On Left Side", value: 1 },
							  { name: "$$$/Illustrator/Graphs/Dialog/GraphType/valueAxis3=On Both Sides", value: 3 }];
		ValueAxisMenu: ValueAxisMenuType1 <== (IsBarGraphType ? ValueAxisMenuType2 : (IsScatterGraphType ? ValueAxisMenuType3 : ValueAxisMenuType1));
		ValueAxis: 1;
		ShowValueAxis: true <== (IsPieGraphType || IsRadarGraphType) ? false : true;
								
		unlink GraphMenuIndex: 1 <== IsPieGraphType ? 1 : GraphMenuIndex;
		DefaultGraphMenu: [ { name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsGraph=Graph Options",	value: 1 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsAxis=Value Axis",		value: 2 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsCategory=Category Axis",value: 4 }];
							
		ScatterGraphMenu: [ { name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsGraph=Graph Options",	value: 1 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsAxis=Value Axis",		value: 2 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsBottom=Bottom Axis",	value: 3 }];
							
		RadarGraphMenu: [	{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsGraph=Graph Options",	value: 1 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsAxis=Value Axis",		value: 2 }];
							
		LeftRightAxisGraphMenu: [ { name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsGraph=Graph Options", value: 1 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsLeftAxis=Left Axis",		value: 5 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsRightAxis=Right Axis",		value: 6 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsCategory=Category Axis",	value: 4 }];
							
		TopBottomAxisGraphMenu: [ { name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsGraph=Graph Options", value: 1 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsBottomAxis=Bottom Axis",	value: 3 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsTopAxis=Top Axis",			value: 7 },
							{ name: "$$$/Illustrator/Graphs/Dialog/GraphType/optionsCategory=Category Axis",	value: 4 }];							
							
		GraphMenu: DefaultGraphMenu <== IsRadarGraphType ? RadarGraphMenu : (IsScatterGraphType ? ScatterGraphMenu : ((IsBarGraphType && ValueAxis == 3) ? TopBottomAxisGraphMenu : (((IsAreaGraphType || IsColumnGraphType || IsLineGraphType) && ValueAxis == 3) ? LeftRightAxisGraphMenu : DefaultGraphMenu)));
		
		ShowOptionsGroup: GraphMenuIndex <== ((GraphMenuIndex == 4) || (GraphMenuIndex == 1)) ? GraphMenuIndex : 2; // tied to GraphMenuIndex
		
		CatAxisToUse: 1 <== (GraphMenuIndex == 4 && (IsScatterGraphType || IsLineGraphType || IsAreaGraphType || IsColumnGraphType)) ? 4 : 1;
		ValueAxisToUse: 1 <== (GraphMenuIndex == 2) ? (IsBarGraphType ? (ValueAxis == 1 ? 3 : 4) : ((ValueAxis == 1 || IsScatterGraphType) ? 1 : 2)): 1;
		AxisToUse: 1 <== (GraphMenuIndex == 3) ? 4 : ((GraphMenuIndex == 7) ? 3 : ((GraphMenuIndex == 6) ? 2 : ((GraphMenuIndex == 5) ? 1 : ((GraphMenuIndex == 4) ? CatAxisToUse : ValueAxisToUse))));

	logic:
		relate
		{
			ValueAxis <== (IsScatterGraphType && (ValueAxis == 2)) ? 1 : (IsBarGraphType ? 2 : 1);
			GraphType <== GraphType;
		}
		
		when(DrawFilledLines) relate
		{
			LineWidth <== LineWidthValue;
			LineWidthValue <== LineWidth;
		}
		
		when( LeftAxis_OverrideCalculatedValues ) relate
		{
			LeftAxis_OverrideMinValue <== (LeftAxis_OverrideMinValue >= LeftAxis_OverrideMaxValue) ? (LeftAxis_OverrideMaxValue - 1) : LeftAxis_OverrideMinValue;
			LeftAxis_OverrideMaxValue <== (LeftAxis_OverrideMaxValue <= LeftAxis_OverrideMinValue) ? (LeftAxis_OverrideMinValue + 1) : LeftAxis_OverrideMaxValue;
		}

		when( LeftAxis_OverrideCalculatedValues ) relate
		{
			LeftAxis_OverrideMinValue <== LeftAxis_MinValue;
			LeftAxis_MinValue <== LeftAxis_OverrideMinValue;
		}
		when( LeftAxis_OverrideCalculatedValues ) relate
		{
			LeftAxis_OverrideMaxValue <== LeftAxis_MaxValue;
			LeftAxis_MaxValue <== LeftAxis_OverrideMaxValue;
		}			
		when( LeftAxis_OverrideCalculatedValues ) relate
		{
			LeftAxis_OverrideDivisionsValue <== LeftAxis_DivisionsValue;
			LeftAxis_DivisionsValue <== LeftAxis_OverrideDivisionsValue;			
		}
		
		when( RightAxis_OverrideCalculatedValues ) relate
		{
			RightAxis_OverrideMinValue <== (RightAxis_OverrideMinValue >= RightAxis_OverrideMaxValue) ? (RightAxis_OverrideMaxValue - 1) : RightAxis_OverrideMinValue;
			RightAxis_OverrideMaxValue <== (RightAxis_OverrideMaxValue <= RightAxis_OverrideMinValue) ? (RightAxis_OverrideMinValue + 1) : RightAxis_OverrideMaxValue;
		}

		when( RightAxis_OverrideCalculatedValues ) relate
		{
			RightAxis_OverrideMinValue <== RightAxis_MinValue;
			RightAxis_MinValue <== RightAxis_OverrideMinValue;
		}
		when( RightAxis_OverrideCalculatedValues ) relate
		{
			RightAxis_OverrideMaxValue <== RightAxis_MaxValue;
			RightAxis_MaxValue <== RightAxis_OverrideMaxValue;
		}			
		when( RightAxis_OverrideCalculatedValues ) relate
		{
			RightAxis_OverrideDivisionsValue <== RightAxis_DivisionsValue;
			RightAxis_DivisionsValue <== RightAxis_OverrideDivisionsValue;			
		}
		
		when( BottomAxis_OverrideCalculatedValues ) relate
		{
			BottomAxis_OverrideMinValue <== (BottomAxis_OverrideMinValue >= BottomAxis_OverrideMaxValue) ? (BottomAxis_OverrideMaxValue - 1) : BottomAxis_OverrideMinValue;
			BottomAxis_OverrideMaxValue <== (BottomAxis_OverrideMaxValue <= BottomAxis_OverrideMinValue) ? (BottomAxis_OverrideMinValue + 1) : BottomAxis_OverrideMaxValue;
		}

		when( BottomAxis_OverrideCalculatedValues ) relate
		{
			BottomAxis_OverrideMinValue <== BottomAxis_MinValue;
			BottomAxis_MinValue <== BottomAxis_OverrideMinValue;
		}
		when( BottomAxis_OverrideCalculatedValues ) relate
		{
			BottomAxis_OverrideMaxValue <== BottomAxis_MaxValue;
			BottomAxis_MaxValue <== BottomAxis_OverrideMaxValue;
		}			
		when( BottomAxis_OverrideCalculatedValues ) relate
		{
			BottomAxis_OverrideDivisionsValue <== BottomAxis_DivisionsValue;
			BottomAxis_DivisionsValue <== BottomAxis_OverrideDivisionsValue;			
		}
		
		when( TopAxis_OverrideCalculatedValues ) relate
		{
			TopAxis_OverrideMinValue <== (TopAxis_OverrideMinValue >= TopAxis_OverrideMaxValue) ? (TopAxis_OverrideMaxValue - 1) : TopAxis_OverrideMinValue;
			TopAxis_OverrideMaxValue <== (TopAxis_OverrideMaxValue <= TopAxis_OverrideMinValue) ? (TopAxis_OverrideMinValue + 1) : TopAxis_OverrideMaxValue;
		}

		when( TopAxis_OverrideCalculatedValues ) relate
		{
			TopAxis_OverrideMinValue <== TopAxis_MinValue;
			TopAxis_MinValue <== TopAxis_OverrideMinValue;
		}
		when( TopAxis_OverrideCalculatedValues ) relate
		{
			TopAxis_OverrideMaxValue <== TopAxis_MaxValue;
			TopAxis_MaxValue <== TopAxis_OverrideMaxValue;
		}			
		when( TopAxis_OverrideCalculatedValues ) relate
		{
			TopAxis_OverrideDivisionsValue <== TopAxis_DivisionsValue;
			TopAxis_DivisionsValue <== TopAxis_OverrideDivisionsValue;			
		}
}
